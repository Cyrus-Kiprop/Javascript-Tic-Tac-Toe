!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=2)}([function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function s(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],o=0;o<n.length;o++){var i=n[o],c=e.base?i[0]+e.base:i[0],l=t[c]||0,u="".concat(c," ").concat(l);t[c]=l+1;var d=s(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:g(f,e),references:1}),r.push(u)}return r}function l(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var u,d=(u=[],function(n,e){return u[n]=e,u.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function m(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,b=0;function g(n,e){var t,r,o;if(e.singleton){var i=b++;t=p||(p=l(e)),r=f.bind(null,t,i,!1),o=f.bind(null,t,i,!0)}else t=l(e),r=m.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=s(t[r]);a[o].references--}for(var i=c(n,e),l=0;l<t.length;l++){var u=s(t[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=i}}}},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}var a,s,c;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},function(n,e,t){"use strict";t.r(e);t(3),t(5);const r={WINNING_COMBINATIONS:[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]},o=function(){const n=n=>{const t=document.getElementById("container"),r=document.createElement("div");r.setAttribute("class","bg-dark");const o=document.getElementById("hide");o.style.display="none";const i=document.createElement("h1");i.innerHTML="Tic-Tac-Toe",i.setAttribute("class","banner"),r.appendChild(i);const a=document.createElement("h2");a.innerHTML=n,a.setAttribute("class","winner"),r.appendChild(a);const s=document.createElement("btn");s.setAttribute("class","btn btn-ov reset-btn"),s.innerHTML="Reset",s.addEventListener("click",()=>window.location.reload()),r.appendChild(s);const c=document.createElement("btn");return c.setAttribute("class","btn btn-ov reset-btn"),c.innerHTML="Restart",c.addEventListener("click",()=>e(r,o)),r.appendChild(c),t.appendChild(r),t},e=(n,e)=>{n.style.display="none",e.style.display="flex"};return{winningMessage:e=>n(`Congratulation ${e} is the winner!!`),drawMessage:()=>n("It's a draw ")}}(),i=document.getElementById("welcome-form");function a(n,e){const t=new c,r=new s(n,t,"X"),i=new s(e,t,"O");let a=0;function l(){return function(){let n=!1;const e=a%2==0?i:r;return t.isWinner()&&(o.winningMessage(e.name),n=!0),t.isDraw()&&(o.drawMessage(e.name),n=!0),n}()?(t.reset(),a=0,a):(a%2==0?r.myTurn():i.myTurn(),a+=1,a)}this.start=function(){const n={childList:!0},e=new MutationObserver(()=>l());t.cells.forEach(t=>e.observe(t,n)),l()}}function s(n,e,t){this.name=n,this.signature=t,this.getName=()=>n,this.myTurn=function(){e.cells.forEach(n=>{""===n.innerHTML&&n.addEventListener("click",r)})};const r=n=>{const{target:t}=n;t.innerText=this.signature,e.cells.forEach(n=>{n.removeEventListener("click",r,{useCapture:!0})})}}function c(){this.cells=Array.from(document.querySelectorAll("div.block")),this.isWinner=function(){let n=!1;const e=this.cells;return r.WINNING_COMBINATIONS.forEach(t=>{const r=e[t[0]].innerText,o=e[t[1]].innerText,i=e[t[2]].innerText||"";""!==r&&o===r&&i===o&&(n=!0)}),n},this.isDraw=function(){return this.cells.every(n=>["X","O"].includes(n.innerText))},this.reset=function(){return this.cells.forEach(n=>{n.innerText=""})}}document.addEventListener("DOMContentLoaded",()=>{i.addEventListener("submit",n=>{const e=document.getElementById("player-one-name").value||"player1",t=document.getElementById("player-two-name").value||"player2",r=document.getElementById("play-area");n.preventDefault(),i.classList.toggle("none"),r.classList.toggle("none");new a(e,t).start()})});const l={Board:c,Player:s,gameUtils:o,boardUtils:r};e.default=l},function(n,e,t){var r=t(0),o=t(4);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},function(n,e,t){(e=t(1)(!1)).push([n.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n\t-webkit-box-sizing: border-box;\n \t -moz-box-sizing: border-box;\n  \tbox-sizing: border-box;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n\t-webkit-box-sizing: inherit;\n\t-moz-box-sizing: inherit;\n\tbox-sizing: inherit;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""]),n.exports=e},function(n,e,t){var r=t(0),o=t(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},function(n,e,t){(e=t(1)(!1)).push([n.i,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@600&display=swap);"]),e.push([n.i,"body {\n  background-color: #0a192f;\n  padding-top: 6rem;\n}\n\n.container {\n  font-family: 'Montserrat', sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  background-color: #0a192f;\n  font-weight: 600;\n  color: rgb(204, 214, 246);\n  border: 1px solid rgb(100, 255, 218);\n}\n\n.game-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#container-none {\n  display: none;\n}\n\n.form-group label {\n  color: rgb(100, 255, 218);\n}\n\n.container h1,\nh2 {\n  font-size: 45px;\n}\n\n#welcome-form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 700px;\n  margin: auto;\n}\n\n#welcome-form .form-group {\n  margin: 2rem;\n}\n\n#welcome-form .form-group label {\n  font-size: 18px;\n  font-weight: 700;\n  margin-bottom: 1rem;\n}\n\n.none {\n  display: none !important;\n}\n\n.grid {\n  display: grid !important;\n}\n\n.play-area {\n  display: grid;\n  width: 300px;\n  height: 300px;\n  grid-template-columns: auto auto auto;\n  margin: 4rem 0;\n  animation-duration: 0.5s;\n  animation-timing-function: ease-in-out;\n  animation-name: rotation;\n  animation-iteration-count: 3;\n  transform-origin: right center;\n}\n\n@keyframes rotation {\n  from {\n    transform: rotate(0deg);\n    transform-origin: center center;\n  }\n\n  to {\n    transform: rotate(360deg);\n    transform-origin: center center;\n  }\n}\n\n.block {\n  display: flex;\n  width: 100px;\n  height: 100px;\n  align-items: center;\n  justify-content: center;\n  font-size: 3rem;\n  font-weight: bold;\n  border: 2px solid rgb(100, 255, 218);\n  transition: background 0.2s ease-in-out;\n  color: rgb(100, 255, 218);\n}\n\n.block:hover {\n  cursor: pointer;\n  background-color: rgba(100, 255, 218, 0.07);\n}\n\n#block_0,\n#block_1,\n#block_2 {\n  border-top: none;\n}\n\n#block_0,\n#block_3,\n#block_6 {\n  border-left: none;\n}\n\n#block_6,\n#block_7,\n#block_8 {\n  border-bottom: none;\n}\n\n#block_2,\n#block_5,\n#block_8 {\n  border-right: none;\n}\n\n.winner,\n.draw {\n  font-size: 30px;\n  font-family: 'Montserrat', sans-serif;\n  text-align: center;\n  color: rgb(100, 255, 218);\n}\n\n.bg-dark {\n  z-index: 100;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  background-color: rgba(100, 255, 218, 0.07) !important;\n  height: 500px;\n  padding: 0 4rem;\n  margin: auto;\n  width: 800px;\n  position: absolute;\n  top: 2rem;\n  left: 15%;\n  border: 1px solid rgb(100, 255, 218);\n  box-shadow: rgba(2, 12, 27, 0.7) 0 10px 30px -10px;\n}\n\n.banner {\n  color: white;\n  font-size: 50px;\n  font-family: 'Montserrat', sans-serif;\n  text-align: center;\n  margin-bottom: 4rem;\n}\n\n.reset-btn {\n  font-family: 'Montserrat', sans-serif;\n  font-size: 1.4rem;\n  color: inherit;\n  margin-top: 3rem;\n}\n\n.btn-ov {\n  border: 1px solid rgb(100, 255, 218);\n  background-color: #0a192f;\n  color: inherit;\n}\n\n.btn-ov:hover {\n  color: rgb(100, 255, 218);\n  background-color: rgba(100, 255, 218, 0.07) !important;\n}\n",""]),n.exports=e}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,